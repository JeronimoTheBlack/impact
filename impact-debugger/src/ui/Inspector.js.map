{"version":3,"file":"Inspector.js","sourceRoot":"","sources":["Inspector.tsx"],"names":[],"mappings":"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","sourcesContent":["import { h } from \"preact\";\nimport { useState } from \"preact/hooks\";\nimport { memo } from \"preact/compat\";\nimport * as styles from \"./styles\";\nimport { isArray, isObject, isValidJson } from \"./utils\";\n\nfunction renderValue({\n  path,\n  value,\n  delimiter,\n  renderPaths,\n  expandedPaths,\n  onClickPath,\n  onToggleExpand,\n  selectedStatePath,\n  onSubmitState,\n}: {\n  onSubmitState?: (newState: string) => void;\n  selectedStatePath?: string;\n  onToggleExpand: (path: string[]) => void;\n  path: string;\n  delimiter: string;\n  value: any;\n  renderPaths?: RenderPaths;\n  expandedPaths: string[];\n  onClickPath?: (path: string[]) => void;\n}) {\n  const wrapper = renderPaths && renderPaths[path];\n  let node;\n\n  if (isObject(value)) {\n    node = (\n      <Nested\n        key={path}\n        startBracket=\"{\"\n        endBracket=\"}\"\n        path={path}\n        delimiter={delimiter}\n        expandedPaths={expandedPaths}\n        hasWrapper={Boolean(wrapper)}\n        onClickPath={onClickPath}\n        renderPaths={renderPaths}\n        onToggleExpand={onToggleExpand}\n        isArray={false}\n        value={value}\n        selectedStatePath={selectedStatePath}\n        onSubmitState={onSubmitState}\n      />\n    );\n  } else if (isArray(value)) {\n    node = (\n      <Nested\n        key={path}\n        startBracket=\"[\"\n        endBracket=\"]\"\n        delimiter={delimiter}\n        renderPaths={renderPaths}\n        path={path}\n        expandedPaths={expandedPaths}\n        hasWrapper={Boolean(wrapper)}\n        onClickPath={onClickPath}\n        onToggleExpand={onToggleExpand}\n        isArray\n        value={value}\n        selectedStatePath={selectedStatePath}\n        onSubmitState={onSubmitState}\n      />\n    );\n  } else {\n    node = (\n      <ValueComponent\n        key={path}\n        path={path}\n        delimiter={delimiter}\n        value={value}\n        onClickPath={onClickPath}\n        selectedStatePath={selectedStatePath}\n        hasWrapper={Boolean(wrapper)}\n        onSubmitState={onSubmitState}\n      />\n    );\n  }\n\n  return wrapper ? wrapper(node) : node;\n}\n\ntype PathKeyProps = {\n  path: string;\n  onClickPath?: (path: string[]) => void;\n  onToggleExpand?: (path: string[]) => void;\n  disabled: boolean;\n  delimiter: string;\n};\n\nconst PathKey = ({\n  path,\n  onClickPath,\n  onToggleExpand,\n  disabled,\n  delimiter,\n}: PathKeyProps) => {\n  return path.length ? (\n    <span\n      className={styles.key}\n      onClick={\n        disabled\n          ? undefined\n          : (event) => {\n              event.stopPropagation();\n              if (onClickPath && (event.metaKey || event.ctrlKey)) {\n                onClickPath(path.split(delimiter));\n              } else if (onToggleExpand) {\n                onToggleExpand(path.split(delimiter));\n              }\n            }\n      }\n    >\n      {path.split(delimiter).pop()}:\n    </span>\n  ) : null;\n};\n\ntype EditValueProps = {\n  value: any;\n  onSubmit: (newState: string) => void;\n};\n\nconst EditValue = ({ value, onSubmit }: EditValueProps) => {\n  const [state, setState] = useState(() => JSON.stringify(value, null, 2));\n  const isValid = isValidJson(state);\n\n  return (\n    <span\n      className={styles.editValueWrapper}\n      onClick={(event) => event.stopPropagation()}\n    >\n      <div className={styles.editValuePopup}>\n        <textarea\n          autoFocus\n          value={state}\n          onChange={(event) => setState(event.currentTarget.value)}\n          onKeyDown={(event) => {\n            if ((event.metaKey || event.ctrlKey) && event.keyCode === 13) {\n              onSubmit(state);\n            }\n          }}\n          className={styles.newState}\n          style={{\n            borderColor: isValid ? undefined : styles.colors.red,\n          }}\n        />\n        <span className={styles.ok}>CMD/CTRL + ENTER to save</span>\n      </div>\n    </span>\n  );\n};\n\ntype NestedProps = {\n  startBracket: string;\n  endBracket: string;\n  expandedPaths: string[];\n  renderPaths?: RenderPaths;\n  delimiter: string;\n  path: string;\n  hasWrapper: boolean;\n  isArray: boolean;\n  value: any;\n  onToggleExpand: (path: string[]) => void;\n  onClickPath?: (path: string[]) => void;\n  selectedStatePath?: string;\n  onSubmitState?: (newState: string) => void;\n};\n\nconst Nested = memo(\n  ({\n    expandedPaths,\n    path,\n    onToggleExpand,\n    onClickPath,\n    startBracket,\n    renderPaths,\n    hasWrapper,\n    endBracket,\n    isArray,\n    selectedStatePath,\n    value,\n    delimiter,\n    onSubmitState,\n  }: NestedProps) => {\n    const shouldCollapse = !expandedPaths.includes(path);\n    const isClass = value.__CLASS__;\n\n    if (selectedStatePath && path === selectedStatePath) {\n      return (\n        <div\n          className={styles.inlineNested}\n          onClick={(event) => {\n            event.stopPropagation();\n            onToggleExpand(path.split(delimiter));\n          }}\n        >\n          {path.length ? (\n            <span className={styles.key}>{path.split(delimiter).pop()}:</span>\n          ) : null}\n          <EditValue\n            value={isClass ? value.value : value}\n            onSubmit={onSubmitState}\n          />\n        </div>\n      );\n    }\n\n    if (shouldCollapse) {\n      const keys = isClass ? Object.keys(value.value) : Object.keys(value);\n\n      return (\n        <div\n          className={styles.inlineNested}\n          onClick={(event) => {\n            event.stopPropagation();\n            onToggleExpand(path.split(delimiter));\n          }}\n        >\n          <PathKey\n            path={path}\n            delimiter={delimiter}\n            onClickPath={onClickPath}\n            onToggleExpand={onToggleExpand}\n            disabled={!onSubmitState || hasWrapper}\n          />\n          {startBracket}\n          <span className={styles.keyCount}>\n            {isArray ? (\n              keys.length + \" items\"\n            ) : (\n              <span className={styles.inlineNested}>\n                {isClass ? (\n                  <span className={styles.inlineClass}>{value.name}</span>\n                ) : null}{\" \"}\n                {keys.sort().slice(0, 3).join(\", \") + \"...\"}\n              </span>\n            )}\n          </span>\n          {endBracket}\n        </div>\n      );\n    }\n\n    return (\n      <div>\n        <div\n          className={styles.bracket(true)}\n          onClick={(event) => {\n            event.stopPropagation();\n            onToggleExpand(path.split(delimiter));\n          }}\n        >\n          <PathKey\n            path={path}\n            delimiter={delimiter}\n            onClickPath={onClickPath}\n            onToggleExpand={onToggleExpand}\n            disabled={!onSubmitState || hasWrapper}\n          />\n          {startBracket}\n        </div>\n        <div className={styles.nestedChildren}>\n          {Array.isArray(value)\n            ? value.map((_, index) =>\n                renderValue({\n                  path: path.concat((path ? delimiter : \"\") + String(index)),\n                  delimiter,\n                  value: value[index],\n                  renderPaths,\n                  expandedPaths,\n                  onClickPath,\n                  onSubmitState,\n                  onToggleExpand,\n                  selectedStatePath,\n                }),\n              )\n            : isClass\n            ? [\n                <span\n                  className={styles.otherValue}\n                  key={path.concat((path ? delimiter : \"\") + \"__CLASS__\")}\n                >\n                  {value.name}\n                </span>,\n                ...Object.keys(value.value)\n                  .sort()\n                  .map((key) => {\n                    return renderValue({\n                      path: path.concat((path ? delimiter : \"\") + key),\n                      value: value.value[key],\n                      delimiter,\n                      renderPaths,\n                      expandedPaths,\n                      onClickPath,\n                      onSubmitState,\n                      onToggleExpand,\n                      selectedStatePath,\n                    });\n                  }),\n              ]\n            : Object.keys(value)\n                .sort()\n                .map((key) => {\n                  return renderValue({\n                    path: path.concat((path ? delimiter : \"\") + key),\n                    value: value[key],\n                    delimiter,\n                    renderPaths,\n                    expandedPaths,\n                    onClickPath,\n                    onSubmitState,\n                    onToggleExpand,\n                    selectedStatePath,\n                  });\n                })}\n        </div>\n        <div className={styles.bracket(false)}>{endBracket}</div>\n      </div>\n    );\n  },\n);\n\ntype ValueComponentProps = {\n  value: string | number | boolean;\n  path: string;\n  hasWrapper: boolean;\n  onClickPath?: (path: string[]) => void;\n  delimiter: string;\n  selectedStatePath?: string;\n  onSubmitState?: (newState: string) => void;\n};\n\nconst ValueComponent = memo(\n  ({\n    value,\n    path,\n    onClickPath,\n    selectedStatePath,\n    onSubmitState,\n    hasWrapper,\n    delimiter,\n  }: ValueComponentProps) => {\n    const [isHoveringString, setHoveringString] = useState(false);\n\n    if (selectedStatePath && path === selectedStatePath) {\n      return (\n        <div className={styles.genericValue}>\n          {path.length ? (\n            <span className={styles.key}>{path.split(delimiter).pop()}:</span>\n          ) : null}\n          <EditValue value={value} onSubmit={onSubmitState} />\n        </div>\n      );\n    }\n\n    if (\n      typeof value === \"string\" &&\n      value[0] === \"[\" &&\n      value[value.length - 1] === \"]\"\n    ) {\n      return (\n        <div className={styles.otherValue}>\n          <PathKey\n            path={path}\n            delimiter={delimiter}\n            onClickPath={onClickPath}\n            disabled={!onSubmitState || hasWrapper}\n          />\n          {value.substr(1, value.length - 2)}\n        </div>\n      );\n    }\n\n    if (typeof value === \"string\") {\n      return (\n        <div className={styles.stringValue}>\n          <PathKey\n            path={path}\n            delimiter={delimiter}\n            onClickPath={onClickPath}\n            disabled={!onSubmitState || hasWrapper}\n          />\n          <div\n            onMouseOver={() => setHoveringString(true)}\n            onMouseOut={() => setHoveringString(false)}\n          >\n            {'\"'}\n            {value.length > 50 && !isHoveringString\n              ? value.substr(0, 50) + \"...\"\n              : value}\n            {'\"'}\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div className={styles.genericValue}>\n        <PathKey\n          path={path}\n          delimiter={delimiter}\n          onClickPath={onClickPath}\n          disabled={!onSubmitState || hasWrapper}\n        />\n        {String(value)}\n      </div>\n    );\n  },\n);\n\nexport type RenderPaths = {\n  [path: string]: (children: any) => any;\n};\n\ntype InspectorProps = {\n  value: object;\n  expandedPaths: string[];\n  delimiter: string;\n  small?: boolean;\n  onToggleExpand: (path: string[]) => void;\n  onClickPath?: (path: string[]) => void;\n  renderPaths?: RenderPaths;\n  selectedStatePath?: string;\n  onSubmitState?: (newState: string) => void;\n};\n\nconst Inspector = ({\n  value,\n  expandedPaths,\n  small,\n  onToggleExpand,\n  delimiter,\n  onClickPath = () => {},\n  renderPaths,\n  selectedStatePath = \"\",\n  onSubmitState,\n}: InspectorProps) => {\n  return (\n    <div className={small ? styles.smallWrapper : styles.inspectorWrapper}>\n      {renderValue({\n        path: \"\",\n        delimiter,\n        value,\n        renderPaths,\n        expandedPaths,\n        onClickPath,\n        onToggleExpand,\n        selectedStatePath,\n        onSubmitState,\n      })}\n    </div>\n  );\n};\n\nexport default Inspector;\n"]}