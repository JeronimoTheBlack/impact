{"version":3,"file":"context.js","sourceRoot":"","sources":["context.tsx"],"names":[],"mappings":";AAAA,OAAO,EAAE,SAAS,EAAa,aAAa,EAAE,UAAU,EAAE,MAAM,OAAO,CAAC;AAExE,MAAM,uBAAuB,GAAuB,EAAE,CAAC;AAEvD,MAAM,UAAU,yBAAyB;IACvC,OAAO,uBAAuB,CAAC,uBAAuB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;AACrE,CAAC;AAkBD,MAAM,gBAAgB;IAQpB,IAAI,UAAU;QACZ,OAAO,IAAI,CAAC,WAAW,CAAC;IAC1B,CAAC;IAED,YACE,GAAsB,EACtB,MAAiB,EACT,OAAgC;QAAhC,YAAO,GAAP,OAAO,CAAyB;QAVlC,eAAU,GAAG,IAAI,GAAG,EAAc,CAAC;QACnC,gBAAW,GAAG,KAAK,CAAC;QAW1B,IAAI,CAAC,MAAM,GAAG;YACZ,UAAU,EAAE,KAAK;YACjB,GAAG;YACH,MAAM;SACP,CAAC;IACJ,CAAC;IACD,eAAe,CAAC,OAAmB;QACjC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;IAC/B,CAAC;IACD,OAAO,CACL,OAAsB;QAEtB,IAAI,IAAI,CAAC,iBAAiB,EAAE;YAC1B,MAAM,IAAI,CAAC,iBAAiB,CAAC;SAC9B;QAED,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,IAAI,OAAO,KAAK,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE;YACzD,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;SAC1B;QAED,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,IAAI,IAAI,CAAC,MAAM,CAAC,GAAG,KAAK,OAAO,EAAE;YAC1D,IAAI;gBACF,uBAAuB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACnC,IAAI,CAAC,MAAM,GAAG;oBACZ,UAAU,EAAE,IAAI;oBAChB,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE;oBAC3B,GAAG,EAAE,OAAO;iBACb,CAAC;gBACF,uBAAuB,CAAC,GAAG,EAAE,CAAC;gBAE9B,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;aAC1B;YAAC,OAAO,CAAC,EAAE;gBACV,IAAI,CAAC,iBAAiB;oBACpB,IAAI,KAAK,CAAC,iCAAiC,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,IAAI;EAChE,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;gBACP,MAAM,IAAI,CAAC,iBAAiB,CAAC;aAC9B;SACF;QAED,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;YACjB,MAAM,IAAI,KAAK,CAAC,gBAAgB,OAAO,CAAC,IAAI,mBAAmB,CAAC,CAAC;SAClE;QAED,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;IACvC,CAAC;IACD,KAAK;QACH,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;YAClC,OAAO,EAAE,CAAC;QACZ,CAAC,CAAC,CAAC;IACL,CAAC;IACD,OAAO;QACL,IAAI,CAAC,KAAK,EAAE,CAAC;QACb,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;IAC1B,CAAC;CACF;AAED,MAAM,YAAY,GAAG,aAAa,CAA0B,IAAI,CAAC,CAAC;AAElE,MAAM,OAAO,eAEX,SAAQ,SAIR;IAGA,oBAAoB;QAClB,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;IACD,MAAM;QACJ,8FAA8F;QAC9F,8FAA8F;QAC9F,uCAAuC;QACvC,IAAI,CAAC,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE;YAChD,IAAI,CAAC,SAAS,GAAG,IAAI,gBAAgB,CACnC,IAAI,CAAC,KAAK,CAAC,OAAO,EAClB,GAAG,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC;YAC1C,2BAA2B;YAC3B,aAAa;YACb,IAAI,CAAC,OAAO,CACb,CAAC;SACH;QAED,OAAO,CACL,KAAC,YAAY,CAAC,QAAQ,IAAC,KAAK,EAAE,IAAI,CAAC,SAAS,YACzC,IAAI,CAAC,KAAK,CAAC,QAAQ,GACE,CACzB,CAAC;IACJ,CAAC;;AAxBM,2BAAW,GAAG,YAAY,CAAC;AA2BpC,MAAM,UAAU,OAAO,CAAC,OAAmB;IACzC,MAAM,sBAAsB,GAAG,yBAAyB,EAAE,CAAC;IAE3D,IAAI,CAAC,sBAAsB,EAAE;QAC3B,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAC;KAC9D;IAED,sBAAsB,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;AAClD,CAAC;AAED,MAAM,UAAU,OAAO,CACrB,OAAsB;IAItB,MAAM,kBAAkB,GAAG,GAAG,EAAE;QAC9B,MAAM,sBAAsB,GAAG,yBAAyB,EAAE,CAAC;QAE3D,IAAI,CAAC,sBAAsB,EAAE;YAC3B,MAAM,gBAAgB,GAAG,UAAU,CAAC,YAAY,CAAC,CAAC;YAElD,IAAI,CAAC,gBAAgB,EAAE;gBACrB,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAC;aAC/D;YAED,OAAO,gBAAgB,CAAC,OAAO,CAAO,OAAO,CAAC,CAAC;SAChD;QAED,OAAO,sBAAsB,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;IACjD,CAAC,CAAC;IAEF,kBAAkB,CAAC,QAAQ,GAAG,CAAC,KAAwC,EAAE,EAAE;QACzE,iBAAiB;QACjB,MAAM,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;QAC3C,MAAM,QAAQ,GAAG,SAAS,CAAC,QAAQ,CAAC;QAEpC,OAAO,SAAS,CAAC,QAAQ,CAAC;QAE1B,OAAO,CACL,KAAC,eAAe,IAAC,KAAK,EAAE,SAAc,EAAE,OAAO,EAAE,OAAO,YACrD,QAAQ,GACO,CACnB,CAAC;IACJ,CAAC,CAAC;IAEF,aAAa;IACb,kBAAkB,CAAC,QAAQ,CAAC,WAAW;QACrC,OAAO,CAAC,IAAI,IAAI,yBAAyB,CAAC;IAE5C,OAAO,kBAAyB,CAAC;AACnC,CAAC","sourcesContent":["import { Component, ReactNode, createContext, useContext } from \"react\";\n\nconst currentContextContainer: ContextContainer[] = [];\n\nexport function getActiveContextContainer() {\n  return currentContextContainer[currentContextContainer.length - 1];\n}\n\nexport type Context<T, A extends Record<string, unknown> | void> = (\n  props: A,\n) => T;\n\nexport type ContextState =\n  | {\n      isResolved: true;\n      value: any;\n      ref: Context<any, any>;\n    }\n  | {\n      isResolved: false;\n      constr: () => any;\n      ref: Context<any, any>;\n    };\n\nclass ContextContainer {\n  // For obscure reasons (https://github.com/facebook/react/issues/17163#issuecomment-607510381) React will\n  // swallow the first error on render and render again. To correctly throw the initial error we keep a reference to it\n  private _resolvementError?: Error;\n  private _state: ContextState;\n  private _disposers = new Set<() => void>();\n  private _isDisposed = false;\n\n  get isDisposed() {\n    return this._isDisposed;\n  }\n\n  constructor(\n    ref: Context<any, any>,\n    constr: () => any,\n    private _parent: ContextContainer | null,\n  ) {\n    this._state = {\n      isResolved: false,\n      ref,\n      constr,\n    };\n  }\n  registerCleanup(cleaner: () => void) {\n    this._disposers.add(cleaner);\n  }\n  resolve<T, A extends Record<string, unknown> | void>(\n    context: Context<T, A>,\n  ): T {\n    if (this._resolvementError) {\n      throw this._resolvementError;\n    }\n\n    if (this._state.isResolved && context === this._state.ref) {\n      return this._state.value;\n    }\n\n    if (!this._state.isResolved && this._state.ref === context) {\n      try {\n        currentContextContainer.push(this);\n        this._state = {\n          isResolved: true,\n          value: this._state.constr(),\n          ref: context,\n        };\n        currentContextContainer.pop();\n\n        return this._state.value;\n      } catch (e) {\n        this._resolvementError =\n          new Error(`Could not initialize context \"${context?.name}\":\n${String(e)}`);\n        throw this._resolvementError;\n      }\n    }\n\n    if (!this._parent) {\n      throw new Error(`The context \"${context.name}\" is not provided`);\n    }\n\n    return this._parent.resolve(context);\n  }\n  clear() {\n    this._disposers.forEach((cleaner) => {\n      cleaner();\n    });\n  }\n  dispose() {\n    this.clear();\n    this._isDisposed = true;\n  }\n}\n\nconst reactContext = createContext<ContextContainer | null>(null);\n\nexport class ContextProvider<\n  T extends Record<string, unknown> | void,\n> extends Component<{\n  context: Context<any, any>;\n  props: T;\n  children: React.ReactNode;\n}> {\n  static contextType = reactContext;\n  container!: ContextContainer;\n  componentWillUnmount(): void {\n    this.container.dispose();\n  }\n  render(): ReactNode {\n    // React can keep the component reference and mount/unmount it multiple times. Because of that\n    // we need to ensure to always have a hooks container instantiated when rendering, as it could\n    // have been disposed due to an unmount\n    if (!this.container || this.container.isDisposed) {\n      this.container = new ContextContainer(\n        this.props.context,\n        () => this.props.context(this.props.props),\n        // eslint-disable-next-line\n        // @ts-ignore\n        this.context,\n      );\n    }\n\n    return (\n      <reactContext.Provider value={this.container}>\n        {this.props.children}\n      </reactContext.Provider>\n    );\n  }\n}\n\nexport function cleanup(cleaner: () => void) {\n  const activeContextContainer = getActiveContextContainer();\n\n  if (!activeContextContainer) {\n    throw new Error(\"You are cleaning up in an invalid context\");\n  }\n\n  activeContextContainer.registerCleanup(cleaner);\n}\n\nexport function context<T, A extends Record<string, unknown> | void>(\n  context: Context<T, A>,\n): (() => T) & {\n  Provider: React.FC<A & { children: React.ReactNode }>;\n} {\n  const useReactiveContext = () => {\n    const activeContextContainer = getActiveContextContainer();\n\n    if (!activeContextContainer) {\n      const contextContainer = useContext(reactContext);\n\n      if (!contextContainer) {\n        throw new Error(\"You are using a store outside its provider\");\n      }\n\n      return contextContainer.resolve<T, A>(context);\n    }\n\n    return activeContextContainer.resolve(context);\n  };\n\n  useReactiveContext.Provider = (props: A & { children: React.ReactNode }) => {\n    // To avoid TSLIB\n    const propsCopy = Object.assign({}, props);\n    const children = propsCopy.children;\n\n    delete propsCopy.children;\n\n    return (\n      <ContextProvider props={propsCopy as A} context={context}>\n        {children}\n      </ContextProvider>\n    );\n  };\n\n  // @ts-ignore\n  useReactiveContext.Provider.displayName =\n    context.name || \"ReactiveContextProvider\";\n\n  return useReactiveContext as any;\n}\n"]}