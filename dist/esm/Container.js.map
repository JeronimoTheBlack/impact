{"version":3,"file":"Container.js","sourceRoot":"","sources":["../../src/Container.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,EACZ,aAAa,EACb,UAAU,EACV,SAAS,EACT,MAAM,EACN,QAAQ,GACT,MAAM,OAAO,CAAC;AACf,OAAO,KAAK,QAAQ,MAAM,UAAU,CAAC;AAErC,OAAO,EAAE,QAAQ,EAAE,CAAC;AAEpB,MAAM,CAAC,MAAM,OAAO,GAAG,GAAG,EAAE,CAC1B,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC;AAEtD,MAAM,CAAC,MAAM,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC;AAItC,MAAM,SAAS,GAAG,aAAa,CAC7B,IAA+C,CAChD,CAAC;AAEF,MAAM,CAAC,MAAM,eAAe,GAGvB,CAAC,KAAK,EAAE,EAAE;IACb,MAAM,iBAAiB,GAAG,MAAM,EAAsB,CAAC;IACvD,MAAM,eAAe,GAAG,UAAU,CAAC,SAAS,CAAC,CAAC;IAC9C,MAAM,CAAC,SAAS,CAAC,GAAG,QAAQ,CAAC,GAAG,EAAE;QAChC,MAAM,SAAS,GAAG,CAChB,eAAe,IAAI,QAAQ,CAAC,SAAS,CACtC,CAAC,oBAAoB,EAAE,CAAC;QACzB,IAAI,KAAK,CAAC,MAAM,EAAE;YAChB,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,EAAE;gBACrC,SAAS,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC,CAAC;YAChD,CAAC,CAAC,CAAC;SACJ;QACD,OAAO,SAAS,CAAC;IACnB,CAAC,CAAC,CAAC;IAEH,2FAA2F;IAC3F,sDAAsD;IACtD,SAAS,CAAC,GAAG,EAAE;QACb,YAAY,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;QACxC,OAAO,GAAG,EAAE;YACV,iBAAiB,CAAC,OAAO,GAAG,UAAU,CAAC,GAAG,EAAE;gBAC1C,SAAS,CAAC,OAAO,EAAE,CAAC;YACtB,CAAC,CAAsB,CAAC;QAC1B,CAAC,CAAC;IACJ,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,OAAO,CACL,oBAAC,SAAS,CAAC,QAAQ,IAAC,KAAK,EAAE,SAAS,IAAG,KAAK,CAAC,QAAQ,CAAsB,CAC5E,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,UAAU,UAAU,CAAI,cAA0C;IACtE,MAAM,SAAS,GAAG,UAAU,CAAC,SAAS,CAAC,CAAC;IAExC,OAAO,SAAS,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;AAC3C,CAAC","sourcesContent":["import React, {\n  createContext,\n  useContext,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\";\nimport * as tsyringe from \"tsyringe\";\n\nexport { tsyringe };\n\nexport const service = () =>\n  tsyringe.scoped(tsyringe.Lifecycle.ContainerScoped);\n\nexport const inject = tsyringe.inject;\n\nexport type IDisposable = tsyringe.Disposable;\n\nconst diContext = createContext<tsyringe.DependencyContainer>(\n  null as unknown as tsyringe.DependencyContainer\n);\n\nexport const ServiceProvider: React.FC<{\n  children: any;\n  values?: Array<[tsyringe.InjectionToken<unknown>, unknown]>;\n}> = (props) => {\n  const ummountTimeoutRef = useRef<number | undefined>();\n  const parentContainer = useContext(diContext);\n  const [container] = useState(() => {\n    const container = (\n      parentContainer || tsyringe.container\n    ).createChildContainer();\n    if (props.values) {\n      props.values.forEach(([claz, value]) => {\n        container.register(claz, { useValue: value });\n      });\n    }\n    return container;\n  });\n\n  // To ensure we dispose on actual unmount (not with strict mode double running effects), we\n  // use a timeout to ensure that we are still unmounted\n  useEffect(() => {\n    clearTimeout(ummountTimeoutRef.current);\n    return () => {\n      ummountTimeoutRef.current = setTimeout(() => {\n        container.dispose();\n      }) as unknown as number;\n    };\n  }, []);\n\n  return (\n    <diContext.Provider value={container}>{props.children}</diContext.Provider>\n  );\n};\n\nexport function useService<T>(classReference: tsyringe.InjectionToken<T>): T {\n  const container = useContext(diContext);\n\n  return container.resolve(classReference);\n}\n"]}