{"version":3,"file":"signal.js","sourceRoot":"","sources":["../../src/signal.ts"],"names":[],"mappings":"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","sourcesContent":["import { useEffect, useState, useMemo } from \"react\";\n\nclass ObserverContext {\n  private disposeListeners = new Set<() => void>();\n  private subscribeListeners = new Set<() => void>();\n  constructor(private update: () => void) {}\n  onSubscribe(cb: () => void) {\n    this.subscribeListeners.add(cb);\n  }\n  onDisposed(cb: () => void) {\n    this.disposeListeners.add(cb);\n  }\n  subscribe() {\n    const subscribeListeners = Array.from(this.subscribeListeners);\n    subscribeListeners.forEach((cb) => cb());\n    return () => {\n      const disposeListeners = Array.from(this.disposeListeners);\n      disposeListeners.forEach((cb) => cb());\n    };\n  }\n  notify() {\n    this.update();\n  }\n}\n\nlet observerContext: ObserverContext | undefined;\n\nfunction observe(fn: (...args: any[]) => any, deps?: any[]) {\n  const [version, setState] = useState(0);\n\n  const context = (observerContext = new ObserverContext(() =>\n    setState((current) => current + 1)\n  ));\n\n  const result = deps ? useMemo(() => fn(), [version, ...deps]) : fn();\n\n  useEffect(() => context.subscribe());\n\n  observerContext = undefined;\n\n  return result;\n}\n\n/**\n * Wrap a component to track any signal consumed\n */\nexport function observer<T extends (...args: any[]) => any>(component: T): T {\n  return ((...args: unknown[]) => observe(() => component(...args))) as T;\n}\n\n/**\n * Use this hook to produce a result tracking signals. Typically used when defining the\n * React elements returned from a component, but can also be used to memoize by passing\n * an empty array or related dependendent values in the array\n */\nexport function useSignals<T extends () => any>(fn: T, deps?: any[]) {\n  return observe(fn, deps);\n}\n\nconst signalMetadataKey = Symbol(\"observable\");\n\nexport function signal(...args: any[]) {\n  const descriptor = args[2] as {\n    initializer?: () => unknown;\n    configurable: boolean;\n    enumerable: boolean;\n  };\n\n  const getMetaData = (target: unknown) => {\n    // @ts-ignore\n    const metadata = Reflect.getOwnMetadata(\n      signalMetadataKey,\n      target,\n      args[1]\n    ) || {\n      value: descriptor.initializer ? descriptor.initializer() : undefined,\n      subscribers: new Set<ObserverContext>(),\n    };\n\n    // @ts-ignore\n    Reflect.defineMetadata(signalMetadataKey, metadata, target, args[1]);\n\n    return metadata as {\n      value: unknown;\n      subscribers: Set<ObserverContext>;\n    };\n  };\n\n  return {\n    get() {\n      const metadata = getMetaData(this);\n\n      if (observerContext) {\n        const context = observerContext;\n\n        observerContext.onSubscribe(() => {\n          metadata.subscribers.add(context);\n        });\n        observerContext.onDisposed(() => {\n          metadata.subscribers.delete(context);\n        });\n      }\n\n      return metadata.value;\n    },\n    set(newValue: unknown) {\n      const metadata = getMetaData(this);\n\n      metadata.value = newValue;\n\n      const subscribers = Array.from(metadata.subscribers);\n      subscribers.forEach((context) => context.notify());\n\n      // @ts-ignore\n      Reflect.defineMetadata(signalMetadataKey, metadata, this, args[1]);\n    },\n    configurable: descriptor.configurable,\n    enumerable: descriptor.enumerable,\n  } as any;\n}\n"]}